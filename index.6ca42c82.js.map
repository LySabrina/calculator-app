{"mappings":"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","sources":["<anon>","node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-08f7d3042c65e9c4.js","src/main/js/index.mjs","src/main/js/calculator.mjs","node_modules/@parcel/runtime-js/lib/runtime-e715aee3afe05e73.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire06f1\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire06f1\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"27Lyk\", function(module, exports) {\n\n$parcel$export(module.exports, \"register\", () => $18c11f3350a906ea$export$6503ec6e8aabbaf, (v) => $18c11f3350a906ea$export$6503ec6e8aabbaf = v);\nvar $18c11f3350a906ea$export$6503ec6e8aabbaf;\nvar $18c11f3350a906ea$export$f7ad0328861e2f03;\n\"use strict\";\nvar $18c11f3350a906ea$var$mapping = new Map();\nfunction $18c11f3350a906ea$var$register(baseUrl, manifest) {\n    for(var i = 0; i < manifest.length - 1; i += 2)$18c11f3350a906ea$var$mapping.set(manifest[i], {\n        baseUrl: baseUrl,\n        path: manifest[i + 1]\n    });\n}\nfunction $18c11f3350a906ea$var$resolve(id) {\n    var resolved = $18c11f3350a906ea$var$mapping.get(id);\n    if (resolved == null) throw new Error(\"Could not resolve bundle with id \" + id);\n    return new URL(resolved.path, resolved.baseUrl).toString();\n}\n$18c11f3350a906ea$export$6503ec6e8aabbaf = $18c11f3350a906ea$var$register;\n$18c11f3350a906ea$export$f7ad0328861e2f03 = $18c11f3350a906ea$var$resolve;\n\n});\n\nvar $a73ffd1fb9500c4e$exports = {};\n\n(parcelRequire(\"27Lyk\")).register(new URL(\"\", import.meta.url).toString(), JSON.parse('[\"eStYU\",\"index.6ca42c82.js\",\"kag7B\",\"button-click.8aeb537b.wav\"]'));\n\n/**\n * Module Pattern Object - Basically Singleton\n * There is always one instance of calculator within the app.\n */ const $345f1576ffa2d349$var$calculator = function() {\n    let total = 0;\n    let firstNum = 0;\n    let secondNum;\n    let currOperator;\n    const add = (num1, num2)=>num1 + num2;\n    const sub = (num1, num2)=>num1 - num2;\n    const multiply = (num1, num2)=>num1 * num2;\n    const divide = (num1, num2)=>{\n        if (num2 == 0) throw new Error(\"Cannot divide by 0\");\n        return num1 / num2;\n    };\n    //all operator return result after two numebrs\n    const operate = (operator)=>{\n        currOperator = operator;\n        console.log(\"Current operator \" + currOperator);\n        console.log(\"1st num \" + firstNum);\n        console.log(\"2nd nUm \" + secondNum);\n        if (checkNumInit()) return;\n        switch(operator){\n            case \"add\":\n                const result = add(firstNum, secondNum);\n                total = result;\n                firstNum = total;\n                secondNum = undefined;\n                break;\n            case \"sub\":\n                total = sub(firstNum, secondNum);\n                firstNum = total;\n                console.log(\"sub rsutl \" + total);\n                secondNum = undefined;\n                break;\n            case \"multiply\":\n                total = multiply(firstNum, secondNum);\n                firstNum = total;\n                console.log(\"multiply result - \" + total);\n                secondNum = undefined;\n                break;\n            case \"divide\":\n                try {\n                    total = divide(firstNum, secondNum);\n                    firstNum = total;\n                    secondNum = undefined;\n                } catch (error) {\n                    console.log(\"error caught\");\n                    firstNum = 0;\n                    total = \"Cannot divide by zero\";\n                }\n                break;\n            default:\n                return;\n        }\n    };\n    const setCurrOperator = (operator)=>currOperator = operator;\n    const setFirstNum = (val)=>firstNum = val;\n    const setSecondNum = (val)=>secondNum = val;\n    const getFirstNum = ()=>firstNum;\n    const getSecondNum = ()=>secondNum;\n    const getOperator = ()=>currOperator;\n    const setOperator = (operator)=>currOperator = operator;\n    const getPrevOperator = ()=>prevOperator;\n    const checkNumInit = ()=>{\n        if (firstNum === undefined || secondNum === undefined) return true;\n        return false;\n    };\n    const getTotal = ()=>total;\n    const reset = ()=>{\n        total = 0;\n        firstNum = 0;\n        secondNum = undefined;\n    };\n    const countDecimal = ()=>{\n        const numAsStr = String(total);\n        if (numAsStr.indexOf(\".\") != -1) {\n            const substr = numAsStr.substring(numAsStr + 1);\n            return substr.length;\n        } else return 0;\n    };\n    const cleanUpDeciaml = ()=>{\n        if (countDecimal() > 0) total = total.toFixed(2);\n    };\n    return {\n        operate: operate,\n        getTotal: getTotal,\n        reset: reset,\n        setFirstNum: setFirstNum,\n        setSecondNum: setSecondNum,\n        getFirstNum: getFirstNum,\n        getSecondNum: getSecondNum,\n        getOperator: getOperator,\n        getPrevOperator: getPrevOperator,\n        setOperator: setOperator\n    };\n}();\nvar $345f1576ffa2d349$export$2e2bcd8739ae039 = $345f1576ffa2d349$var$calculator;\n\n\nconst $02bb0941f71d89bd$var$display = document.querySelector(\".calculator__display\");\n$02bb0941f71d89bd$var$display.textContent = (0, $345f1576ffa2d349$export$2e2bcd8739ae039).getFirstNum();\nconst $02bb0941f71d89bd$var$calInputs = document.querySelector(\".calculator__inputs\");\nconst $02bb0941f71d89bd$var$equal = document.getElementById(\"equal\");\nconst $02bb0941f71d89bd$var$btns = document.querySelectorAll(\".calculaltor__inputs--btns\");\nvar $ce9550fb7d2939aa$exports = {};\n$ce9550fb7d2939aa$exports = new URL(\"button-click.8aeb537b.wav\", import.meta.url).toString();\n\n\nconst $02bb0941f71d89bd$var$sound = new URL($ce9550fb7d2939aa$exports);\nconst $02bb0941f71d89bd$var$soundEffect = new Audio($02bb0941f71d89bd$var$sound);\nlet $02bb0941f71d89bd$var$inputNum = \"\"; //Number inputed when user clicks on num buttons\nconst $02bb0941f71d89bd$var$themeSelector = document.querySelector(\".theme-switcher__btns\");\n$02bb0941f71d89bd$var$themeSelector.onclick = (e)=>{\n    if (e.target.tagName === \"INPUT\") {\n        const themeVal = e.target.value;\n        const classTemplate = `${themeVal}-theme`;\n        const body = document.body;\n        body.className = classTemplate;\n    }\n};\n$02bb0941f71d89bd$var$calInputs.addEventListener(\"click\", (e)=>{\n    if (e.target.tagName == \"BUTTON\") $02bb0941f71d89bd$var$soundEffect.play();\n});\n/**\n * Handling the number btns and operator onclick event\n * Will update firstNum and secondNum inside calculator\n */ $02bb0941f71d89bd$var$calInputs.addEventListener(\"click\", (e)=>{\n    const btn = e.target;\n    const regex = /[0-9\\.]/;\n    if (btn === $02bb0941f71d89bd$var$calInputs) {\n        console.log(\"clicked on parent\");\n        return;\n    }\n    if (regex.test(btn.value)) $02bb0941f71d89bd$var$handleNumInputs(btn);\n    else $02bb0941f71d89bd$var$handleOperators(btn);\n});\n/**\n * Handles a button click by getting the value and appending that value into inputNum variable\n * Afterwards, proceed to update calculator firstNum or secondNum\n * @param {HTMLButtonElement} btn\n */ function $02bb0941f71d89bd$var$handleNumInputs(btn) {\n    const value = btn.value;\n    if (value === \".\") {\n        if ($02bb0941f71d89bd$var$inputNum.indexOf(\".\") === -1) $02bb0941f71d89bd$var$inputNum += btn.value;\n    } else $02bb0941f71d89bd$var$inputNum += btn.value;\n    $02bb0941f71d89bd$var$display.textContent = $02bb0941f71d89bd$var$inputNum;\n    const num = Number($02bb0941f71d89bd$var$display.textContent);\n    if ((0, $345f1576ffa2d349$export$2e2bcd8739ae039).getOperator() === undefined || (0, $345f1576ffa2d349$export$2e2bcd8739ae039).getOperator() === \"equal\") //using old value of input result\n    (0, $345f1576ffa2d349$export$2e2bcd8739ae039).setFirstNum(num);\n    else (0, $345f1576ffa2d349$export$2e2bcd8739ae039).setSecondNum(num);\n    console.log(\"index 1st num \", (0, $345f1576ffa2d349$export$2e2bcd8739ae039).getFirstNum());\n    console.log(\"index 2nd num \", (0, $345f1576ffa2d349$export$2e2bcd8739ae039).getSecondNum());\n}\n/**\n * Handles btn elements that has operators values & non-numbers\n * @param {HTMLButtonElement} btn\n */ function $02bb0941f71d89bd$var$handleOperators(btn) {\n    const value = btn.value;\n    switch(value){\n        case \"equal\":\n            if ((0, $345f1576ffa2d349$export$2e2bcd8739ae039).getFirstNum() !== undefined || (0, $345f1576ffa2d349$export$2e2bcd8739ae039).getSecondNum() !== undefined) {\n                console.log(\"operationsss\", (0, $345f1576ffa2d349$export$2e2bcd8739ae039).getOperator());\n                //Now that we have both firstNum and secondNum defined with values, we call the calculator operation\n                (0, $345f1576ffa2d349$export$2e2bcd8739ae039).operate((0, $345f1576ffa2d349$export$2e2bcd8739ae039).getOperator());\n                const result = (0, $345f1576ffa2d349$export$2e2bcd8739ae039).getTotal();\n                console.log(\"total - \" + result);\n                $02bb0941f71d89bd$var$display.textContent = result;\n                //delete?\n                (0, $345f1576ffa2d349$export$2e2bcd8739ae039).setOperator(\"equal\"); //we set our operator of calculator to equal now because, a user can proceed to start a brand new calculation or continue from their previous result\n                console.log(\"inputNum\" + $02bb0941f71d89bd$var$inputNum);\n                $02bb0941f71d89bd$var$inputNum = \"\";\n            //inputNum is being added to and stil lholds the other value\n            }\n            break;\n        case \"delete\":\n            $02bb0941f71d89bd$var$inputNum = $02bb0941f71d89bd$var$inputNum.substring(0, $02bb0941f71d89bd$var$inputNum.length - 1);\n            if ($02bb0941f71d89bd$var$inputNum === \"\") $02bb0941f71d89bd$var$inputNum = \"0\";\n            $02bb0941f71d89bd$var$display.textContent = $02bb0941f71d89bd$var$inputNum;\n            const num = Number($02bb0941f71d89bd$var$display.textContent);\n            if ((0, $345f1576ffa2d349$export$2e2bcd8739ae039).getOperator() === undefined || (0, $345f1576ffa2d349$export$2e2bcd8739ae039).getOperator() == \"equal\") //using old value of input result\n            (0, $345f1576ffa2d349$export$2e2bcd8739ae039).setFirstNum(num);\n            else (0, $345f1576ffa2d349$export$2e2bcd8739ae039).setSecondNum(num);\n            break;\n        case \"reset\":\n            $02bb0941f71d89bd$var$inputNum = \"\";\n            $02bb0941f71d89bd$var$display.textContent = \"0\";\n            (0, $345f1576ffa2d349$export$2e2bcd8739ae039).setFirstNum(0);\n            (0, $345f1576ffa2d349$export$2e2bcd8739ae039).setSecondNum(undefined);\n            (0, $345f1576ffa2d349$export$2e2bcd8739ae039).setOperator(undefined);\n            break;\n        default:\n            $02bb0941f71d89bd$var$inputNum = \"\";\n            if ((0, $345f1576ffa2d349$export$2e2bcd8739ae039).getOperator() != undefined) {\n                (0, $345f1576ffa2d349$export$2e2bcd8739ae039).operate((0, $345f1576ffa2d349$export$2e2bcd8739ae039).getOperator());\n                const currentTotal = (0, $345f1576ffa2d349$export$2e2bcd8739ae039).getFirstNum(); //why firstNum instead of total? Because inside calculator, the firstNum will equal to the newly operation total. Total variable may still ho\n                $02bb0941f71d89bd$var$display.textContent = currentTotal;\n            }\n            const operator = value;\n            (0, $345f1576ffa2d349$export$2e2bcd8739ae039).setOperator(operator);\n            break;\n    }\n}\n\n\n//# sourceMappingURL=index.6ca42c82.js.map\n","\"use strict\";\n\nvar mapping = new Map();\nfunction register(baseUrl, manifest) {\n  for (var i = 0; i < manifest.length - 1; i += 2) {\n    mapping.set(manifest[i], {\n      baseUrl: baseUrl,\n      path: manifest[i + 1]\n    });\n  }\n}\nfunction resolve(id) {\n  var resolved = mapping.get(id);\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n  return new URL(resolved.path, resolved.baseUrl).toString();\n}\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(new __parcel__URL__(\"\").toString(),JSON.parse(\"[\\\"eStYU\\\",\\\"index.6ca42c82.js\\\",\\\"kag7B\\\",\\\"button-click.8aeb537b.wav\\\"]\"));","import calculator from \"./calculator.mjs\";\n\nconst display = document.querySelector(\".calculator__display\");\ndisplay.textContent = calculator.getFirstNum();\nconst calInputs = document.querySelector(\".calculator__inputs\");\nconst equal = document.getElementById(\"equal\");\n\nconst btns = document.querySelectorAll(\".calculaltor__inputs--btns\");\n\nconst sound = new URL(\"../../assets/audio/button-click.wav\", import.meta.url);\nconst soundEffect = new Audio(sound);\n\nlet inputNum = \"\"; //Number inputed when user clicks on num buttons\n\nconst themeSelector = document.querySelector(\".theme-switcher__btns\");\n\nthemeSelector.onclick = (e) => {\n  if (e.target.tagName === \"INPUT\") {\n    const themeVal = e.target.value;\n    const classTemplate = `${themeVal}-theme`;\n    const body = document.body;\n    body.className = classTemplate;\n  }\n};\n\ncalInputs.addEventListener(\"click\", (e) => {\n  if (e.target.tagName == \"BUTTON\") {\n    soundEffect.play();\n  }\n});\n/**\n * Handling the number btns and operator onclick event\n * Will update firstNum and secondNum inside calculator\n */\ncalInputs.addEventListener(\"click\", (e) => {\n  const btn = e.target;\n  const regex = /[0-9\\.]/;\n  if (btn === calInputs) {\n    console.log(\"clicked on parent\");\n    return;\n  }\n  if (regex.test(btn.value)) {\n    handleNumInputs(btn);\n  } else {\n    handleOperators(btn);\n  }\n});\n\n/**\n * Handles a button click by getting the value and appending that value into inputNum variable\n * Afterwards, proceed to update calculator firstNum or secondNum\n * @param {HTMLButtonElement} btn\n */\nfunction handleNumInputs(btn) {\n  const value = btn.value;\n  if (value === \".\") {\n    if (inputNum.indexOf(\".\") === -1) {\n      inputNum += btn.value;\n    }\n  } else {\n    inputNum += btn.value;\n  }\n  display.textContent = inputNum;\n  const num = Number(display.textContent);\n  if (\n    calculator.getOperator() === undefined ||\n    calculator.getOperator() === \"equal\"\n  ) {\n    //using old value of input result\n    calculator.setFirstNum(num);\n  } else {\n    calculator.setSecondNum(num);\n  }\n\n  console.log(\"index 1st num \", calculator.getFirstNum());\n  console.log(\"index 2nd num \", calculator.getSecondNum());\n}\n\n/**\n * Handles btn elements that has operators values & non-numbers\n * @param {HTMLButtonElement} btn\n */\nfunction handleOperators(btn) {\n  const value = btn.value;\n  switch (value) {\n    case \"equal\":\n      if (\n        calculator.getFirstNum() !== undefined ||\n        calculator.getSecondNum() !== undefined\n      ) {\n        console.log(\"operationsss\", calculator.getOperator());\n\n        //Now that we have both firstNum and secondNum defined with values, we call the calculator operation\n        calculator.operate(calculator.getOperator());\n        const result = calculator.getTotal();\n        console.log(\"total - \" + result);\n        display.textContent = result;\n        //delete?\n        calculator.setOperator(\"equal\"); //we set our operator of calculator to equal now because, a user can proceed to start a brand new calculation or continue from their previous result\n        console.log(\"inputNum\" + inputNum);\n        inputNum = \"\";\n        //inputNum is being added to and stil lholds the other value\n      }\n      break;\n\n    case \"delete\":\n      inputNum = inputNum.substring(0, inputNum.length - 1);\n      if (inputNum === \"\") {\n        inputNum = \"0\";\n      }\n      display.textContent = inputNum;\n      const num = Number(display.textContent);\n\n      if (\n        calculator.getOperator() === undefined ||\n        calculator.getOperator() == \"equal\"\n      ) {\n        //using old value of input result\n        calculator.setFirstNum(num);\n      } else {\n        calculator.setSecondNum(num);\n      }\n      break;\n\n    case \"reset\":\n      inputNum = \"\";\n      display.textContent = \"0\";\n      calculator.setFirstNum(0);\n      calculator.setSecondNum(undefined);\n      calculator.setOperator(undefined);\n      break;\n\n    default:\n      inputNum = \"\";\n      if (calculator.getOperator() != undefined) {\n        calculator.operate(calculator.getOperator());\n        const currentTotal = calculator.getFirstNum(); //why firstNum instead of total? Because inside calculator, the firstNum will equal to the newly operation total. Total variable may still ho\n        display.textContent = currentTotal;\n      }\n      const operator = value;\n      calculator.setOperator(operator);\n      // const operator = value;\n      // calculator.operate(operator);\n\n      // if (calculator.getOperator() != undefined) {\n      //   const currentTotal = calculator.getFirstNum(); //why firstNum instead of total? Because inside calculator, the firstNum will equal to the newly operation total. Total variable may still ho\n      //   display.textContent = currentTotal;\n      // }\n\n      break;\n  }\n}\n","/**\n * Module Pattern Object - Basically Singleton\n * There is always one instance of calculator within the app.\n */\nconst calculator = (function () {\n  let total = 0;\n  let firstNum = 0;\n  let secondNum;\n  let currOperator;\n\n  const add = (num1, num2) => num1 + num2;\n  const sub = (num1, num2) => num1 - num2;\n  const multiply = (num1, num2) => num1 * num2;\n  const divide = (num1, num2) => {\n    if (num2 == 0) {\n      throw new Error(\"Cannot divide by 0\");\n    }\n    return num1 / num2;\n  };\n  //all operator return result after two numebrs\n\n  const operate = (operator) => {\n    currOperator = operator;\n    console.log(\"Current operator \" + currOperator);\n    console.log(\"1st num \" + firstNum);\n    console.log(\"2nd nUm \" + secondNum);\n\n    if (checkNumInit()) {\n      return;\n    }\n\n    switch (operator) {\n      case \"add\":\n        const result = add(firstNum, secondNum);\n        total = result;\n        firstNum = total;\n        secondNum = undefined;\n        break;\n\n      case \"sub\":\n        total = sub(firstNum, secondNum);\n        firstNum = total;\n        console.log(\"sub rsutl \" + total);\n        secondNum = undefined;\n        break;\n\n      case \"multiply\":\n        total = multiply(firstNum, secondNum);\n        firstNum = total;\n        console.log(\"multiply result - \" + total);\n        secondNum = undefined;\n        break;\n\n      case \"divide\":\n        try {\n          total = divide(firstNum, secondNum);\n          firstNum = total;\n          secondNum = undefined;\n        } catch (error) {\n          console.log(\"error caught\");\n          firstNum = 0;\n          total = \"Cannot divide by zero\";\n        }\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const setCurrOperator = (operator) => (currOperator = operator);\n  const setFirstNum = (val) => (firstNum = val);\n  const setSecondNum = (val) => (secondNum = val);\n  const getFirstNum = () => firstNum;\n  const getSecondNum = () => secondNum;\n  const getOperator = () => currOperator;\n  const setOperator = (operator) => (currOperator = operator);\n  const getPrevOperator = () => prevOperator;\n  const checkNumInit = () => {\n    if (firstNum === undefined || secondNum === undefined) {\n      return true;\n    }\n    return false;\n  };\n\n  const getTotal = () => total;\n  const reset = () => {\n    total = 0;\n    firstNum = 0;\n    secondNum = undefined;\n  };\n\n  const countDecimal = () => {\n    const numAsStr = String(total);\n    if (numAsStr.indexOf(\".\") != -1) {\n      const substr = numAsStr.substring(numAsStr + 1);\n      return substr.length;\n    } else {\n      return 0;\n    }\n  };\n\n  const cleanUpDeciaml = () => {\n    if (countDecimal() > 0) {\n      total = total.toFixed(2);\n    }\n  };\n  return {\n    operate,\n    getTotal,\n    reset,\n    setFirstNum,\n    setSecondNum,\n    getFirstNum,\n    getSecondNum,\n    getOperator,\n    getPrevOperator,\n    setOperator,\n  };\n})();\n\nexport default calculator;\n","module.exports = new __parcel__URL__(\"button-click.8aeb537b.wav\").toString();"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","Object","defineProperty","get","$18c11f3350a906ea$export$6503ec6e8aabbaf","set","v","enumerable","configurable","$18c11f3350a906ea$var$mapping","Map","baseUrl","manifest","i","length","path","URL","url","toString","JSON","parse","$345f1576ffa2d349$var$calculator","secondNum","currOperator","total","firstNum","add","num1","num2","sub","multiply","divide","checkNumInit","undefined","operate","operator","console","log","error","getTotal","reset","setFirstNum","val","setSecondNum","getFirstNum","getSecondNum","getOperator","getPrevOperator","prevOperator","setOperator","$02bb0941f71d89bd$var$display","document","querySelector","textContent","$02bb0941f71d89bd$var$calInputs","getElementById","querySelectorAll","$ce9550fb7d2939aa$exports","$02bb0941f71d89bd$var$soundEffect","Audio","$02bb0941f71d89bd$var$inputNum","$02bb0941f71d89bd$var$themeSelector","onclick","e","target","tagName","themeVal","value","classTemplate","body","className","addEventListener","play","btn","regex","test","$02bb0941f71d89bd$var$handleNumInputs","indexOf","num","Number","$02bb0941f71d89bd$var$handleOperators","result","substring","currentTotal"],"version":3,"file":"index.6ca42c82.js.map"}